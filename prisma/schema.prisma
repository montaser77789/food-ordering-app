generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String
  image         String
  phone         String?
  streetAddress String?
  postalCode    String?
  city          String?
  country       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  role          UserRole       @default(USER)
  Account       Account[]
  orders        OrderProduct[]
  Session       Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model product {
  id          String         @id @default(uuid())
  name        String
  description String
  image       String
  order       Int            @default(autoincrement())
  basePrise   Float
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  catagoryId  String?
  extras      Extras[]
  orders      OrderProduct[]
  sizes       Size[]
  catagory    catagory?      @relation(fields: [catagoryId], references: [id])
}

model catagory {
  id       String    @id @default(uuid())
  name     String
  order    Int       @default(autoincrement())
  products product[]
}

model Order {
  id            String         @id @default(uuid())
  paid          Boolean        @default(false)
  subTotal      Float
  deliveryFree  Float
  userEmail     String
  phone         String?
  streetAddress String?
  postalCode    String?
  city          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  products      OrderProduct[]
}

model OrderProduct {
  id        String  @id @default(uuid())
  quntity   Int
  orderId   String
  userId    String?
  productId String
  Order     Order   @relation(fields: [orderId], references: [id])
  product   product @relation(fields: [productId], references: [id])
  User      User?   @relation(fields: [userId], references: [id])
}

model Size {
  id        String      @id @default(uuid())
  name      productSize
  price     Float
  productId String
  product   product     @relation(fields: [productId], references: [id])
}

model Extras {
  id        String        @id @default(uuid())
  name      productExtras
  price     Float
  productId String?
  product   product?      @relation(fields: [productId], references: [id])
}

enum productSize {
  Small
  Medium
  Large
}

enum productExtras {
  Cheese
  Onions
  Olives
}

enum UserRole {
  USER
  ADMIN
}
